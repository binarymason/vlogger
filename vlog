#!/usr/bin/env bash

set -e

epoch=$(date +"%s")
ts=$(date +"%Y%m%d" -d "@$epoch")
vlogdir=${HOME}/vlog
outdir=${vlogdir}/${ts}
clocktime=$(date +"%H%M" -d "@$epoch")
humantime=$(date +"%c" -d "@$epoch")
out="${clocktime}_${epoch}"
mpg_file="$outdir/$out.mpeg"
meta_file="$outdir/$out.md"
audio_file=out.wav
source_code_root=${HOME}/code/vlogger
deepspeech_dir=${source_code_root}/models

info() {
  echo "+ $*"
}

get_weather() {
  curl -s wttr.in?format=3
}

get_duration() {
  ffprobe -i "$mpg_file" -show_format -v quiet | sed -n 's/duration=//p'
}


get_transcript() {
  ffmpeg -loglevel error -i "$mpg_file" -acodec pcm_s16le -ac 1 -ar 16000 "$audio_file" -y
  deepspeech --model "$deepspeech_dir/output_graph.pbmm" --alphabet "$deepspeech_dir/alphabet.txt" --lm "$deepspeech_dir/lm.binary" --trie "$deepspeech_dir/trie" --audio "$audio_file" 2>/dev/null
  rm "$audio_file"
}

get_video_count() {
  n=$(find "$vlogdir" -type f -name "*.mp*g" | wc -l)
  ((n++))
  echo "$n"
}


record_video() {
  info "recording: #$video_count $humantime [press q to stop]"
  mkdir -p "$outdir"

  # arguments
  # -f input (audio or video)
  # -i input device
  # -r frame rate
  # -q:v video quality. (reasonable range 2-5) lower the number, the higher the quality
  ffmpeg -loglevel error -f alsa -i plughw:CARD=Snowball,DEV=0  -f video4linux2 -i /dev/video2 -r 60 -q:v 2 "$mpg_file" &
  mpv --screen=1 -fs --fs-screen=1 /dev/video0 --really-quiet
  pkill ffmpeg
}

playback() {
  info "starting playback [press q to stop]"
  ffplay -loglevel error -fs -autoexit "$mpg_file"
}

process() {
  info "processing..."
  duration=$(get_duration)
  info "getting the weather..."
  weather=$(get_weather)
  info "transcribing..."
  transcript=$(get_transcript)
  wait
  echo -n "Add space delimited emotions then Press ENTER (leave blank to skip): "
  read -r emotion
  emotion=$(echo "$emotion" | tr ' ' ',')
  {
    echo "---"
    echo
    echo "duration: $duration"

    [[ ! -z "$emotion" ]] && echo "emotion: $emotion"
    echo "timestamp: $epoch"
    echo "video_count: $video_count"
    echo "weather: '$weather'"
    echo
    echo "---"
    echo "$transcript"
    echo
  } >> "$meta_file"

  echo "video saved to: $mpg_file"
  echo "meta saved to: $meta_file"
  cat "$meta_file"
}

video_count=$(get_video_count)
record_video
playback & # fork so processing happens in background during playback
process

